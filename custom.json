{
  "openapi": "3.1.0",
  "info": {
    "title": "Polar API",
    "summary": "Polar HTTP and Webhooks API",
    "description": "Read the docs at https://docs.polar.sh/api-reference",
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "https://api.polar.sh",
      "description": "Production environment",
      "x-speakeasy-server-id": "production"
    },
    {
      "url": "https://sandbox-api.polar.sh",
      "description": "Sandbox environment",
      "x-speakeasy-server-id": "sandbox"
    }
  ],
  "paths": {
  
   
    "/v1/organizations/": {
      "get": {
        "tags": [
          "organizations",
          "documented",
          "featured"
        ],
        "summary": "List Organizations",
        "description": "List organizations.",
        "operationId": "organizations:list",
        "parameters": [
          {
            "name": "slug",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by slug.",
              "title": "Slug"
            },
            "description": "Filter by slug."
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Page number, defaults to 1.",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number, defaults to 1."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": 0,
              "description": "Size of a page, defaults to 10. Maximum is 100.",
              "default": 10,
              "title": "Limit"
            },
            "description": "Size of a page, defaults to 10. Maximum is 100."
          },
          {
            "name": "sorting",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationSortProperty"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order.",
              "default": [
                "created_at"
              ],
              "title": "Sorting"
            },
            "description": "Sorting criterion. Several criteria can be used simultaneously and will be applied in order. Add a minus sign `-` before the criteria name to sort by descending order."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResource_Organization_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-pagination": {
          "type": "offsetLimit",
          "inputs": [
            {
              "name": "page",
              "in": "parameters",
              "type": "page"
            },
            {
              "name": "limit",
              "in": "parameters",
              "type": "limit"
            }
          ],
          "outputs": {
            "results": "$.items",
            "numPages": "$.pagination.max_page"
          }
        },
        "x-speakeasy-group": "organizations",
        "x-speakeasy-name-override": "list",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Organizations.List(ctx, nil, polargo.Int64(1), polargo.Int64(10), nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.ListResourceOrganization != nil {\n        for {\n            // handle items\n\n            res, err = res.Next()\n\n            if err != nil {\n                // handle error\n            }\n\n            if res == nil {\n                break\n            }\n        }\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.organizations.list({\n    page: 1,\n    limit: 10,\n  });\n\n  for await (const page of result) {\n    // Handle the page\n    console.log(page);\n  }\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.organizations.list(page=1, limit=10)\n\n    while res is not None:\n        # Handle items\n\n        res = res.next()"
          }
        ]
      },
      "post": {
        "tags": [
          "organizations",
          "documented",
          "featured"
        ],
        "summary": "Create Organization",
        "description": "Create an organization.",
        "operationId": "organizations:create",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Organization created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "User"
        ],
        "x-speakeasy-group": "organizations",
        "x-speakeasy-name-override": "create",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Organizations.Create(ctx, components.OrganizationCreate{\n        Name: \"<value>\",\n        Slug: \"<value>\",\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Organization != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.organizations.create({\n    name: \"<value>\",\n    slug: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.organizations.create(request={\n        \"name\": \"<value>\",\n        \"slug\": \"<value>\",\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    },
    "/v1/organizations/{id}": {
      "get": {
        "tags": [
          "organizations",
          "documented",
          "featured"
        ],
        "summary": "Get Organization",
        "description": "Get an organization by ID.",
        "operationId": "organizations:get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The organization ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/organizations",
                "resourceName": "Organization",
                "displayProperty": "name"
              },
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "organizations",
        "x-speakeasy-name-override": "get",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Organizations.Get(ctx, \"<value>\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Organization != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.organizations.get({\n    id: \"<value>\",\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.organizations.get(id=\"<value>\")\n\n    # Handle response\n    print(res)"
          }
        ]
      },
      "patch": {
        "tags": [
          "organizations",
          "documented",
          "featured"
        ],
        "summary": "Update Organization",
        "description": "Update an organization.",
        "operationId": "organizations:update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid4",
              "description": "The organization ID.",
              "x-polar-selector-widget": {
                "resourceRoot": "/v1/organizations",
                "resourceName": "Organization",
                "displayProperty": "name"
              },
              "title": "Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "403": {
            "description": "You don't have the permission to update this organization.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotPermitted"
                }
              }
            }
          },
          "404": {
            "description": "Organization not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-polar-allowed-subjects": [
          "Organization",
          "User"
        ],
        "x-speakeasy-group": "organizations",
        "x-speakeasy-name-override": "update",
        "x-codeSamples": [
          {
            "lang": "go",
            "label": "Go (SDK)",
            "source": "package main\n\nimport(\n\t\"context\"\n\t\"os\"\n\tpolargo \"github.com/polarsource/polar-go\"\n\t\"github.com/polarsource/polar-go/models/components\"\n\t\"log\"\n)\n\nfunc main() {\n    ctx := context.Background()\n    \n    s := polargo.New(\n        polargo.WithSecurity(os.Getenv(\"POLAR_ACCESS_TOKEN\")),\n    )\n\n    res, err := s.Organizations.Update(ctx, \"<value>\", components.OrganizationUpdate{\n        PledgeBadgeShowAmount: polargo.Bool(false),\n        PledgeMinimumAmount: polargo.Int64(2000),\n    })\n    if err != nil {\n        log.Fatal(err)\n    }\n    if res.Organization != nil {\n        // handle response\n    }\n}"
          },
          {
            "lang": "typescript",
            "label": "Typescript (SDK)",
            "source": "import { Polar } from \"@polar-sh/sdk\";\n\nconst polar = new Polar({\n  accessToken: process.env[\"POLAR_ACCESS_TOKEN\"] ?? \"\",\n});\n\nasync function run() {\n  const result = await polar.organizations.update({\n    id: \"<value>\",\n    organizationUpdate: {\n      pledgeBadgeShowAmount: false,\n      pledgeMinimumAmount: 2000,\n    },\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();"
          },
          {
            "lang": "python",
            "label": "Python (SDK)",
            "source": "from polar_sdk import Polar\n\nwith Polar(\n    access_token=\"<YOUR_BEARER_TOKEN_HERE>\",\n) as polar:\n\n    res = polar.organizations.update(id=\"<value>\", organization_update={\n        \"pledge_badge_show_amount\": False,\n        \"pledge_minimum_amount\": 2000,\n    })\n\n    # Handle response\n    print(res)"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "OrganizationSortProperty": {
        "type": "string",
        "enum": [
          "created_at",
          "-created_at",
          "name",
          "-name"
        ],
        "title": "OrganizationSortProperty"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "NotPermitted": {
        "properties": {
          "error": {
            "type": "string",
            "const": "NotPermitted",
            "title": "Error"
          },
          "detail": {
            "type": "string",
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "error",
          "detail"
        ],
        "title": "NotPermitted"
      },
      "ListResource_Organization_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Organization"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "ListResource[Organization]"
      },
      "Organization": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Creation timestamp of the object."
          },
          "modified_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modified At",
            "description": "Last modification timestamp of the object."
          },
          "id": {
            "type": "string",
            "format": "uuid4",
            "title": "Id",
            "description": "The organization ID.",
            "x-polar-selector-widget": {
              "displayProperty": "name",
              "resourceName": "Organization",
              "resourceRoot": "/v1/organizations"
            }
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "slug": {
            "type": "string",
            "title": "Slug"
          },
          "avatar_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Url"
          },
          "bio": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bio"
          },
          "company": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Company"
          },
          "blog": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Blog"
          },
          "location": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Location"
          },
          "email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "twitter_username": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Twitter Username"
          },
          "pledge_minimum_amount": {
            "type": "integer",
            "title": "Pledge Minimum Amount"
          },
          "pledge_badge_show_amount": {
            "type": "boolean",
            "title": "Pledge Badge Show Amount"
          },
          "default_upfront_split_to_contributors": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Default Upfront Split To Contributors"
          },
          "profile_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrganizationProfileSettings"
              },
              {
                "type": "null"
              }
            ],
            "description": "Settings for the organization profile"
          },
          "feature_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrganizationFeatureSettings"
              },
              {
                "type": "null"
              }
            ],
            "description": "Settings for the organization features"
          }
        },
        "type": "object",
        "required": [
          "created_at",
          "modified_at",
          "id",
          "name",
          "slug",
          "avatar_url",
          "bio",
          "company",
          "blog",
          "location",
          "email",
          "twitter_username",
          "pledge_minimum_amount",
          "pledge_badge_show_amount",
          "default_upfront_split_to_contributors",
          "profile_settings",
          "feature_settings"
        ],
        "title": "Organization"
      },
      "OrganizationCreate": {
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "title": "Name"
          },
          "slug": {
            "type": "string",
            "minLength": 3,
            "title": "Slug"
          },
          "avatar_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Url"
          },
          "feature_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrganizationFeatureSettings"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "name",
          "slug"
        ],
        "title": "OrganizationCreate"
      },
      "OrganizationFeatureSettings": {
        "properties": {
          "issue_funding_enabled": {
            "type": "boolean",
            "title": "Issue Funding Enabled",
            "description": "If this organization has issue funding enabled",
            "default": false
          }
        },
        "type": "object",
        "title": "OrganizationFeatureSettings"
      },
      "OrganizationProfileSettings": {
        "properties": {
          "enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Enabled",
            "description": "If this organization has a profile enabled"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 160
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "A description of the organization"
          },
          "featured_projects": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Featured Projects",
            "description": "A list of featured projects"
          },
          "featured_organizations": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid4"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Featured Organizations",
            "description": "A list of featured organizations"
          },
          "links": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "maxLength": 2083,
                  "minLength": 1,
                  "format": "uri"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Links",
            "description": "A list of links associated with the organization"
          },
          "subscribe": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrganizationSubscribePromoteSettings"
              },
              {
                "type": "null"
              }
            ],
            "description": "Subscription promotion settings",
            "default": {
              "promote": true,
              "show_count": true,
              "count_free": true
            }
          },
          "accent_color": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Accent Color",
            "description": "Accent color for the organization"
          }
        },
        "type": "object",
        "title": "OrganizationProfileSettings"
      },
      "OrganizationSubscribePromoteSettings": {
        "properties": {
          "promote": {
            "type": "boolean",
            "title": "Promote",
            "description": "Promote email subscription (free)",
            "default": true
          },
          "show_count": {
            "type": "boolean",
            "title": "Show Count",
            "description": "Show subscription count publicly",
            "default": true
          },
          "count_free": {
            "type": "boolean",
            "title": "Count Free",
            "description": "Include free subscribers in total count",
            "default": true
          }
        },
        "type": "object",
        "title": "OrganizationSubscribePromoteSettings"
      },
      "OrganizationUpdate": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 3
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "avatar_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Avatar Url"
          },
          "default_upfront_split_to_contributors": {
            "anyOf": [
              {
                "type": "integer",
                "maximum": 100,
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Default Upfront Split To Contributors"
          },
          "pledge_badge_show_amount": {
            "type": "boolean",
            "title": "Pledge Badge Show Amount",
            "default": false
          },
          "billing_email": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Billing Email"
          },
          "default_badge_custom_content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Default Badge Custom Content"
          },
          "pledge_minimum_amount": {
            "type": "integer",
            "title": "Pledge Minimum Amount",
            "default": 2000
          },
          "total_monthly_spending_limit": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total Monthly Spending Limit"
          },
          "per_user_monthly_spending_limit": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Per User Monthly Spending Limit"
          },
          "profile_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrganizationProfileSettings"
              },
              {
                "type": "null"
              }
            ]
          },
          "feature_settings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrganizationFeatureSettings"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "title": "OrganizationUpdate"
      },
      "Pagination": {
        "properties": {
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          },
          "max_page": {
            "type": "integer",
            "title": "Max Page"
          }
        },
        "type": "object",
        "required": [
          "total_count",
          "max_page"
        ],
        "title": "Pagination"
      },
      
      "ResourceNotFound": {
        "properties": {
          "error": {
            "type": "string",
            "const": "ResourceNotFound",
            "title": "Error"
          },
          "detail": {
            "type": "string",
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "error",
          "detail"
        ],
        "title": "ResourceNotFound"
      },
      
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
      
    },
    "securitySchemes": {
      "oidc": {
        "type": "openIdConnect",
        "openIdConnectUrl": "/.well-known/openid-configuration"
      },
      "pat": {
        "type": "http",
        "description": "You can generate a **Personal Access Token** from your [settings](https://polar.sh/settings).",
        "scheme": "bearer"
      },
      "customer_session": {
        "type": "http",
        "scheme": "bearer"
      },
      "access_token": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "tags": [
    {
      "name": "private",
      "description": "Endpoints that should appear in the schema only in development to generate our internal JS SDK."
    },
    {
      "name": "documented",
      "description": "Endpoints shown and documented in the Polar API documentation."
    },
    {
      "name": "featured",
      "description": "Endpoints featured in the Polar API documentation for their interest in common use-cases."
    },
    {
      "name": "issue_funding",
      "description": "Endpoints related to issue funding and rewards in the Polar API."
    }
  ],
  "security": [
    {
      "access_token": []
    }
  ]
}